"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const vscode = require("vscode");
const splitEditors_1 = require("./splitEditors");
const shared_1 = require("@volar/shared");
async function activate(context, languageClient) {
    var _a;
    await languageClient.onReady();
    while (await languageClient.sendRequest(shared_1.PingRequest.type) !== 'pong') {
        await shared_1.sleep(100);
    }
    languageClient.onRequest(shared_1.GetClientAttrNameCaseRequest.type, async (handler) => {
        var _a;
        let attrCase = attrCases.get(handler.uri);
        if (handler.uri.toLowerCase() === ((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document.uri.toString().toLowerCase())) {
            updateStatusBarText(attrCase);
        }
        return attrCase !== null && attrCase !== void 0 ? attrCase : 'kebabCase';
    });
    const attrCases = new shared_1.UriMap();
    const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right);
    statusBar.command = 'volar.action.attrNameCase';
    onChangeDocument((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document);
    context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(e => {
        onChangeDocument(e === null || e === void 0 ? void 0 : e.document);
    }));
    context.subscriptions.push(vscode.workspace.onDidCloseTextDocument((doc) => {
        attrCases.delete(doc.uri.toString());
    }));
    context.subscriptions.push(vscode.commands.registerCommand('volar.action.attrNameCase', async () => {
        var _a;
        const crtDoc = (_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document;
        if (!crtDoc)
            return;
        const options = new Map();
        // attr
        const attrCase = attrCases.get(crtDoc.uri.toString());
        options.set(4, (attrCase === 'kebabCase' ? '• ' : '') + 'Prop Using kebab-case');
        options.set(5, (attrCase === 'pascalCase' ? '• ' : '') + 'Prop Using pascalCase');
        options.set(6, 'Detect Prop name from Content');
        const select = await splitEditors_1.userPick(options);
        if (select === undefined)
            return; // cancle
        // attr
        if (select === 4) {
            attrCases.set(crtDoc.uri.toString(), 'kebabCase');
            updateStatusBarText('kebabCase');
        }
        if (select === 5) {
            attrCases.set(crtDoc.uri.toString(), 'pascalCase');
            updateStatusBarText('pascalCase');
        }
        if (select === 6) {
            const detects = await languageClient.sendRequest(shared_1.GetServerNameCasesRequest.type, languageClient.code2ProtocolConverter.asTextDocumentIdentifier(crtDoc));
            attrCases.set(crtDoc.uri.toString(), getValidAttrCase(detects.attr));
            updateStatusBarText(getValidAttrCase(detects.attr));
        }
    }));
    async function onChangeDocument(newDoc) {
        if ((newDoc === null || newDoc === void 0 ? void 0 : newDoc.languageId) === 'vue') {
            let attrCase = attrCases.get(newDoc.uri.toString());
            if (!attrCase) {
                const attrMode = vscode.workspace.getConfiguration('volar').get('preferredAttrNameCase');
                if (attrMode === 'kebab') {
                    attrCase = 'kebabCase';
                }
                else if (attrMode === 'pascal') {
                    attrCase = 'pascalCase';
                }
                else {
                    const templateCases = await languageClient.sendRequest(shared_1.GetServerNameCasesRequest.type, languageClient.code2ProtocolConverter.asTextDocumentIdentifier(newDoc));
                    attrCase = getValidAttrCase(templateCases.attr);
                    if (templateCases.attr === 'both') {
                        if (attrMode === 'auto-kebab') {
                            attrCase = 'kebabCase';
                        }
                        else if (attrMode === 'auto-pascal') {
                            attrCase = 'pascalCase';
                        }
                    }
                }
            }
            attrCases.set(newDoc.uri.toString(), attrCase !== null && attrCase !== void 0 ? attrCase : 'unsure');
            updateStatusBarText(attrCase);
            statusBar.show();
        }
        else {
            statusBar.hide();
        }
    }
    function getValidAttrCase(attrCase) {
        if (attrCase === 'both' || attrCase === 'unsure') {
            const attrMode = vscode.workspace.getConfiguration('volar').get('preferredAttrNameCase');
            if (attrMode === 'auto-kebab') {
                return 'kebabCase';
            }
            else if (attrMode === 'auto-pascal') {
                return 'pascalCase';
            }
            return 'kebabCase';
        }
        return attrCase !== null && attrCase !== void 0 ? attrCase : 'kebabCase';
    }
    function updateStatusBarText(attrCase) {
        let text = `Attr: `;
        if (attrCase === 'kebabCase' || attrCase === undefined) {
            text += `kebab-case`;
        }
        else if (attrCase === 'pascalCase') {
            text += `pascalCase`;
        }
        statusBar.text = text;
    }
}
exports.activate = activate;
//# sourceMappingURL=attrNameCase.js.map