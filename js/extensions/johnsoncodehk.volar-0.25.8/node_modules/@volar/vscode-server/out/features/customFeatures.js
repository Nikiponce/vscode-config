"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared_1 = require("@volar/shared");
const fs = require("fs-extra");
const path = require("upath");
const node_1 = require("vscode-languageserver/node");
const vscode_vue_languageservice_1 = require("vscode-vue-languageservice");
function register(connection, documents, servicesManager) {
    connection.onNotification(shared_1.RestartServerNotification.type, async () => {
        servicesManager.restartAll();
    });
    connection.onRequest(shared_1.PingRequest.type, () => 'pong');
    connection.onRequest(shared_1.RefCloseRequest.type, handler => {
        var _a;
        const document = documents.get(handler.textDocument.uri);
        if (!document)
            return;
        return (_a = servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.__internal__.doRefAutoClose(document, handler.position);
    });
    connection.onRequest(shared_1.D3Request.type, handler => {
        var _a;
        const document = documents.get(handler.uri);
        if (!document)
            return;
        return (_a = servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.__internal__.getD3(document);
    });
    connection.onRequest(shared_1.WriteVirtualFilesRequest.type, async () => {
        const progress = await connection.window.createWorkDoneProgress();
        progress.begin('Write', 0, '', true);
        for (const [_, service] of servicesManager.services) {
            const ls = service.getLanguageServiceDontCreate();
            if (!ls)
                continue;
            const globalDocs = ls.__internal__.getGlobalDocs();
            for (const globalDoc of globalDocs) {
                await fs.writeFile(shared_1.uriToFsPath(globalDoc.uri), globalDoc.getText(), "utf8");
            }
            const sourceFiles = ls.__internal__.getAllSourceFiles();
            let i = 0;
            for (const sourceFile of sourceFiles) {
                progress.report(i++ / sourceFiles.length * 100, path.relative(ls.__internal__.rootPath, shared_1.uriToFsPath(sourceFile.uri)));
                for (const [uri, doc] of sourceFile.getTsDocuments()) {
                    if (progress.token.isCancellationRequested) {
                        break;
                    }
                    await fs.writeFile(shared_1.uriToFsPath(uri), doc.getText(), "utf8");
                }
            }
        }
        progress.done();
    });
    connection.onRequest(shared_1.VerifyAllScriptsRequest.type, async () => {
        let errors = 0;
        let warnings = 0;
        const progress = await connection.window.createWorkDoneProgress();
        progress.begin('Verify', 0, '', true);
        for (const [_, service] of servicesManager.services) {
            const ls = service.getLanguageServiceDontCreate();
            if (!ls)
                continue;
            const sourceFiles = ls.__internal__.getAllSourceFiles();
            let i = 0;
            for (const sourceFile of sourceFiles) {
                progress.report(i++ / sourceFiles.length * 100, path.relative(ls.__internal__.rootPath, shared_1.uriToFsPath(sourceFile.uri)));
                if (progress.token.isCancellationRequested) {
                    continue;
                }
                let _result = [];
                await ls.doValidation(sourceFile.uri, result => {
                    connection.sendDiagnostics({ uri: sourceFile.uri, diagnostics: result });
                    _result = result;
                });
                errors += _result.filter(error => error.severity === node_1.DiagnosticSeverity.Error).length;
                warnings += _result.filter(error => error.severity === node_1.DiagnosticSeverity.Warning).length;
            }
        }
        progress.done();
        connection.window.showInformationMessage(`Verification complete. Found ${errors} errors and ${warnings} warnings.`);
    });
    connection.onRequest(shared_1.RangeSemanticTokensRequest.type, async (handler) => {
        var _a;
        return (_a = servicesManager
            .getMatchService(handler.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.getSemanticTokens(handler.textDocument.uri, handler.range);
    });
    connection.onRequest(shared_1.SemanticTokenLegendRequest.type, () => vscode_vue_languageservice_1.semanticTokenLegend);
    connection.onRequest(shared_1.GetServerNameCasesRequest.type, handler => {
        var _a;
        return (_a = servicesManager.getMatchService(handler.uri)) === null || _a === void 0 ? void 0 : _a.__internal__.detectTagNameCase(handler.uri);
    });
}
exports.register = register;
//# sourceMappingURL=customFeatures.js.map