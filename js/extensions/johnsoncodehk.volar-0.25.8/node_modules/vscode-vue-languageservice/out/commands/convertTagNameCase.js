"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const shared_1 = require("@vue/shared");
const node_1 = require("vscode-languageserver/node");
async function execute(document, sourceFile, connection, _findReferences, mode) {
    const desc = sourceFile.getDescriptor();
    if (!desc.template)
        return;
    const template = desc.template;
    const virtualDoc = sourceFile.getTsDocuments().get(sourceFile.uri + '.__VLS_template.ts');
    if (!virtualDoc)
        return;
    const edits = [];
    const components = new Set(sourceFile.getTemplateScriptData().components);
    for (const tagName of components) {
        const searchText = `__VLS_componentPropsBase['${tagName}'`;
        const index = virtualDoc.getText().indexOf(searchText);
        if (index >= 0) {
            const offset = index + searchText.length - `${tagName}'`.length;
            const references = _findReferences(virtualDoc.uri, virtualDoc.positionAt(offset));
            for (const reference of references) {
                if (reference.uri === sourceFile.uri
                    && document.offsetAt(reference.range.start) >= template.loc.start
                    && document.offsetAt(reference.range.end) <= template.loc.end) {
                    const referenceText = document.getText(reference.range);
                    for (const component of components) {
                        if (component === referenceText || shared_1.hyphenate(component) === referenceText) {
                            if (mode === 'kebab' && referenceText !== shared_1.hyphenate(component)) {
                                edits.push(node_1.TextEdit.replace(reference.range, shared_1.hyphenate(component)));
                            }
                            if (mode === 'pascal' && referenceText !== component) {
                                edits.push(node_1.TextEdit.replace(reference.range, component));
                            }
                        }
                    }
                }
            }
        }
    }
    connection.workspace.applyEdit({ changes: { [document.uri]: edits } });
}
exports.execute = execute;
//# sourceMappingURL=convertTagNameCase.js.map