"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const commands_1 = require("../commands");
const convertTagNameCase_1 = require("../commands/convertTagNameCase");
const htmlToPug_1 = require("../commands/htmlToPug");
const pugToHtml_1 = require("../commands/pugToHtml");
const showReferences_1 = require("../commands/showReferences");
const unuseRefSugar_1 = require("../commands/unuseRefSugar");
const useRefSugar_1 = require("../commands/useRefSugar");
function register({ sourceFiles, tsLanguageService, ts }, findReferences) {
    return async (uri, command, args, connection) => {
        if (command === commands_1.Commands.SHOW_REFERENCES && args) {
            showReferences_1.execute(args[0], args[1], args[2], connection);
        }
        const sourceFile = sourceFiles.get(uri);
        if (!sourceFile)
            return;
        const document = sourceFile.getTextDocument();
        if (command === commands_1.Commands.SWITCH_REF_SUGAR) {
            const scriptSetupData = sourceFile.getScriptSetupData();
            if (!scriptSetupData)
                return;
            if (scriptSetupData.labels.length) {
                unuseRefSugar_1.execute(ts, document, sourceFile, connection, findReferences, tsLanguageService);
            }
            else {
                useRefSugar_1.execute(ts, document, sourceFile, connection, findReferences);
            }
        }
        if (command === commands_1.Commands.HTML_TO_PUG) {
            htmlToPug_1.execute(document, sourceFile, connection);
        }
        if (command === commands_1.Commands.PUG_TO_HTML) {
            pugToHtml_1.execute(document, sourceFile, connection);
        }
        if (command === commands_1.Commands.CONVERT_TO_KEBAB_CASE) {
            convertTagNameCase_1.execute(document, sourceFile, connection, findReferences, 'kebab');
        }
        if (command === commands_1.Commands.CONVERT_TO_PASCAL_CASE) {
            convertTagNameCase_1.execute(document, sourceFile, connection, findReferences, 'pascal');
        }
    };
}
exports.register = register;
//# sourceMappingURL=executeCommand.js.map